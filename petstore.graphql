schema @link(url: "https://specs.apollo.dev/link/v1.0") @link(url: "https://specs.apollo.dev/federation/v2.3", import: ["@key", "@provides", "@requires", "@external", "@inaccessible", "@shareable", "@extends", "@tag", "@composeDirective"]) @link(url: "https://the-guild.dev/graphql/mesh/spec/v1.0", import: ["@enum", "@httpOperation", "@transport", "@merge", "@extraSchemaDefinitionDirective"]) @composeDirective(name: "@enum") @composeDirective(name: "@httpOperation") @composeDirective(name: "@transport") @composeDirective(name: "@merge") @composeDirective(name: "@extraSchemaDefinitionDirective") {
  query: Query
  mutation: Mutation
}

directive @enum(subgraph: String, value: String) repeatable on ENUM_VALUE

directive @httpOperation(subgraph: String, path: String, operationSpecificHeaders: [[String]], httpMethod: HTTPMethod, isBinary: Boolean, requestBaseBody: ObjMap, queryParamArgMap: ObjMap, queryStringOptionsByParam: ObjMap, jsonApiFields: Boolean, queryStringOptions: ObjMap) repeatable on FIELD_DEFINITION

directive @transport(subgraph: String, kind: String, location: String, headers: [[String]], queryStringOptions: ObjMap, queryParams: [[String]]) repeatable on SCHEMA

type Query @shareable @extraSchemaDefinitionDirective(directives: {transport: [{subgraph: "Petstore", kind: "rest", location: "https://petstore.swagger.io/v2"}]}) {
  """Multiple status values can be provided with comma separated strings"""
  findPetsByStatus(
    """Status values that need to be considered for filter"""
    status: [queryInput_findPetsByStatus_status_items]!
  ): [Pet] @httpOperation(subgraph: "Petstore", path: "/pet/findByStatus", operationSpecificHeaders: [["Accept", "application/json, application/xml"]], httpMethod: GET, queryParamArgMap: "{\"status\":\"status\"}")
  """
  Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
  """
  findPetsByTags(
    """Tags to filter by"""
    tags: [String]!
  ): [Pet] @httpOperation(subgraph: "Petstore", path: "/pet/findByTags", operationSpecificHeaders: [["Accept", "application/json, application/xml"]], httpMethod: GET, queryParamArgMap: "{\"tags\":\"tags\"}") @deprecated(reason: "deprecated")
  """Returns a single pet"""
  getPetById(
    """ID of pet to return"""
    petId: BigInt!
  ): Pet! @httpOperation(subgraph: "Petstore", path: "/pet/{args.petId}", operationSpecificHeaders: [["Accept", "application/json, application/xml"]], httpMethod: GET) @merge(subgraph: "Petstore", keyField: "id", keyArg: "petId")
  """Returns a map of status codes to quantities"""
  getInventory: JSON @httpOperation(subgraph: "Petstore", path: "/store/inventory", operationSpecificHeaders: [["Accept", "application/json"]], httpMethod: GET)
  """
  For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions
  """
  getOrderById(
    """ID of pet that needs to be fetched"""
    orderId: BigInt!
  ): Order! @httpOperation(subgraph: "Petstore", path: "/store/order/{args.orderId}", operationSpecificHeaders: [["Accept", "application/json, application/xml"]], httpMethod: GET) @merge(subgraph: "Petstore", keyField: "id", keyArg: "orderId")
  """Get user by user name"""
  getUserByName(
    """The name that needs to be fetched. Use user1 for testing."""
    username: String!
  ): User! @httpOperation(subgraph: "Petstore", path: "/user/{args.username}", operationSpecificHeaders: [["Accept", "application/json, application/xml"]], httpMethod: GET)
  """Logs user into the system"""
  loginUser(
    """The user name for login"""
    username: String!
    """The password for login in clear text"""
    password: String!
  ): String @httpOperation(subgraph: "Petstore", path: "/user/login", operationSpecificHeaders: [["Accept", "application/json, application/xml"]], httpMethod: GET, queryParamArgMap: "{\"username\":\"username\",\"password\":\"password\"}")
  """Logs out current logged in user session"""
  logoutUser: JSON @httpOperation(subgraph: "Petstore", path: "/user/logout", operationSpecificHeaders: [["Accept", "application/json, application/xml"]], httpMethod: GET)
}

"""Pet object that needs to be added to the store"""
type Pet @key(fields: "id") @shareable {
  id: BigInt
  category: Category
  name: String!
  photoUrls: [String]!
  tags: [Tag]
  status: mutationInput_addPet_input_status
}

"""
The `BigInt` scalar type represents non-fractional signed whole numeric values.
"""
scalar BigInt

type Category @shareable {
  id: BigInt
  name: String
}

type Tag @shareable {
  id: BigInt
  name: String
}

"""pet status in the store"""
enum mutationInput_addPet_input_status {
  available
  pending
  sold
}

enum queryInput_findPetsByStatus_status_items {
  available
  pending
  sold
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

"""order placed for purchasing the pet"""
type Order @key(fields: "id") @shareable {
  id: BigInt
  petId: BigInt
  quantity: Int
  shipDate: DateTime
  status: mutation_placeOrder_status
  complete: Boolean
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""Order Status"""
enum mutation_placeOrder_status {
  placed
  approved
  delivered
}

"""Updated user object"""
type User @shareable {
  id: BigInt
  username: String
  firstName: String
  lastName: String
  email: String
  password: String
  phone: String
  """User Status"""
  userStatus: Int
}

type Mutation @shareable {
  """uploads an image"""
  uploadFile(
    """ID of pet to update"""
    petId: BigInt!
  ): ApiResponse @httpOperation(subgraph: "Petstore", path: "/pet/{args.petId}/uploadImage", operationSpecificHeaders: [["Content-Type", "multipart/form-data"], ["Accept", "application/json"]], httpMethod: POST)
  """Add a new pet to the store"""
  addPet(input: Pet_Input!): JSON @httpOperation(subgraph: "Petstore", path: "/pet", operationSpecificHeaders: [["Content-Type", "application/json, application/xml"], ["Accept", "application/json, application/xml"]], httpMethod: POST)
  """Update an existing pet"""
  updatePet(input: Pet_Input!): JSON @httpOperation(subgraph: "Petstore", path: "/pet", operationSpecificHeaders: [["Content-Type", "application/json, application/xml"], ["Accept", "application/json, application/xml"]], httpMethod: PUT)
  """Updates a pet in the store with form data"""
  updatePetWithForm(
    """ID of pet that needs to be updated"""
    petId: BigInt!
  ): JSON @httpOperation(subgraph: "Petstore", path: "/pet/{args.petId}", operationSpecificHeaders: [["Content-Type", "application/x-www-form-urlencoded"], ["Accept", "application/json, application/xml"]], httpMethod: POST)
  """Deletes a pet"""
  deletePet(
    api_key: String
    """Pet id to delete"""
    petId: BigInt!
  ): JSON @httpOperation(subgraph: "Petstore", path: "/pet/{args.petId}", operationSpecificHeaders: [["api_key", "{args.api_key}"], ["Accept", "application/json, application/xml"]], httpMethod: DELETE)
  """Place an order for a pet"""
  placeOrder(input: Order_Input!): Order! @httpOperation(subgraph: "Petstore", path: "/store/order", operationSpecificHeaders: [["Content-Type", "application/json"], ["Accept", "application/json, application/xml"]], httpMethod: POST)
  """
  For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors
  """
  deleteOrder(
    """ID of the order that needs to be deleted"""
    orderId: BigInt!
  ): JSON @httpOperation(subgraph: "Petstore", path: "/store/order/{args.orderId}", operationSpecificHeaders: [["Accept", "application/json, application/xml"]], httpMethod: DELETE)
  """Creates list of users with given input array"""
  createUsersWithListInput(
    """List of user object"""
    input: [User_Input]!
  ): JSON @httpOperation(subgraph: "Petstore", path: "/user/createWithList", operationSpecificHeaders: [["Content-Type", "application/json"], ["Accept", "application/json, application/xml"]], httpMethod: POST)
  """This can only be done by the logged in user."""
  updateUser(
    """name that need to be updated"""
    username: String!
    input: User_Input!
  ): JSON @httpOperation(subgraph: "Petstore", path: "/user/{args.username}", operationSpecificHeaders: [["Content-Type", "application/json"], ["Accept", "application/json, application/xml"]], httpMethod: PUT)
  """This can only be done by the logged in user."""
  deleteUser(
    """The name that needs to be deleted"""
    username: String!
  ): JSON @httpOperation(subgraph: "Petstore", path: "/user/{args.username}", operationSpecificHeaders: [["Accept", "application/json, application/xml"]], httpMethod: DELETE)
  """Creates list of users with given input array"""
  createUsersWithArrayInput(
    """List of user object"""
    input: [User_Input]!
  ): JSON @httpOperation(subgraph: "Petstore", path: "/user/createWithArray", operationSpecificHeaders: [["Content-Type", "application/json"], ["Accept", "application/json, application/xml"]], httpMethod: POST)
  """This can only be done by the logged in user."""
  createUser(input: User_Input!): JSON @httpOperation(subgraph: "Petstore", path: "/user", operationSpecificHeaders: [["Content-Type", "application/json"], ["Accept", "application/json, application/xml"]], httpMethod: POST)
}

type ApiResponse @shareable {
  code: Int
  type: String
  message: String
}

"""Pet object that needs to be added to the store"""
input Pet_Input {
  id: BigInt
  category: Category_Input
  name: String!
  photoUrls: [String]!
  tags: [Tag_Input]
  status: mutationInput_addPet_input_status
}

input Category_Input {
  id: BigInt
  name: String
}

input Tag_Input {
  id: BigInt
  name: String
}

"""order placed for purchasing the pet"""
input Order_Input {
  id: BigInt
  petId: BigInt
  quantity: Int
  shipDate: DateTime
  status: mutation_placeOrder_status
  complete: Boolean
}

"""Updated user object"""
input User_Input {
  id: BigInt
  username: String
  firstName: String
  lastName: String
  email: String
  password: String
  phone: String
  """User Status"""
  userStatus: Int
}

enum HTTPMethod {
  GET
  HEAD
  POST
  PUT
  DELETE
  CONNECT
  OPTIONS
  TRACE
  PATCH
}

scalar ObjMap

directive @merge(subgraph: String, argsExpr: String, keyArg: String, keyField: String, key: [String!], additionalArgs: String) repeatable on FIELD_DEFINITION

scalar _DirectiveExtensions

directive @extraSchemaDefinitionDirective(directives: _DirectiveExtensions) repeatable on OBJECT